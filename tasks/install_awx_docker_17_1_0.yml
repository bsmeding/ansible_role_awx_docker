---
## Requirements: Docker and Docker-compose ! install on forehand or use additional roles

- name: check if version is correct for Docker installation
  ansible.builtin.assert:
    that:
      - awx__version is version_compare('17.1.0', '==', strict=true)
    fail_msg: "Only AWX version 17.1.0 are possible with this role"

- name: Check if playbook has been run before.
  stat:
    path: "{{ awx__17_1_0_config_path }}/awx_playbook_complete"
  register: awx_playbook_already_run

- name: Generate broadcast websocket secret
  set_fact:
    broadcast_websocket_secret: "{{ lookup('password', '/dev/null length=128') }}"
  run_once: true
  no_log: true
  when: broadcast_websocket_secret is not defined

# First docker user (if docker role has run), otherwise default role, otherwise root
- name: Create project data dir
  ansible.builtin.file:
    state: directory
    path: "{{ awx__project_data_dir }}"
    mode: "0770"
    owner: "{{ docker_uid | default('root') }}"
    group: "{{ docker_gid | default('root') }}"

- name: Create awx__17_1_0_config_path data dir
  ansible.builtin.file:
    state: directory
    path: "{{ awx__17_1_0_config_path }}"
    mode: "0770"
    owner: "{{ docker_uid | default('root') }}"
    group: "{{ docker_gid | default('root') }}"
  become: true

- name: Create redis_socket dir
  ansible.builtin.file:
    path: "{{ awx__redis_socket_dir }}"
    state: directory
    mode: "0777"
    owner: "{{ docker_uid | default('root') }}"
    group: "{{ docker_gid | default('root') }}"
  become: true

- name: Ensure group "postgres" exists with correct gid
  ansible.builtin.group:
    name: postgres
    state: present
    gid: 999
    non_unique: true      # when provisioning with molecule test or vagrant is is possible that id already in use

- name: Add user "postgres"
  ansible.builtin.user:
    name: postgres
    groups: "{{ docker_gid | default('root') }}"
    shell: /sbin/nologin
    uid: 999
    create_home: no
    non_unique: true
    append: yes
    comment: "Postgres data user"
    state: present
  become: true

- name: Create directories postgres root dir
  ansible.builtin.file:
    path: "{{ awx__postgres_data_dir }}"
    state: directory
    mode: "0770"
    owner: "postgres"
    group: "postgres"
    recurse: true
  changed_when: false    # Because recurse is used, always changed
  become: true

- name: Custom custom_venv_dir found
  block:
    - name: Check if VenV root exist
      ansible.builtin.stat:
        path: "{{ custom_venv_dir }}"
      register: stat_venv_dir

    - name: Create VenV root {{ custom_venv_dir }} directory
      ansible.builtin.file:
        path: "{{ custom_venv_dir }}"
        state: directory
        mode: "0775"
        owner: "{{ docker_uid | default('root') }}"
        group: "{{ docker_gid | default('root') }}"
        recurse: true
      become: true
      changed_when: false
      when: custom_venv_dir is defined and (custom_venvs is defined and custom_venvs|length>0) and (not stat_venv_dir.stat.exists)

    - name: Check if VenV python dir exist
      ansible.builtin.stat:
        path: "{{ custom_python_dir }}"
      register: stat_python_dir

    - name: Create VenV python dir
      ansible.builtin.file:
        path: "{{ custom_python_dir }}"
        state: directory
        mode: "0775"
        owner: "{{ docker_uid | default('root') }}"
        group: "{{ docker_gid | default('root') }}"
        recurse: true
      become: true
      changed_when: false
      when: not stat_python_dir.stat.exists
  when: custom_venv_dir is defined or awx__disable_git_ssl_verify|bool

- name: Install AWX containers
  block:
    - name: Create docker volumes
      community.docker.docker_volume:
        name: "{{ item }}"
      with_items:
        - "supervisor-socket"
        - "rsyslog-socket"
        - "rsyslog-config"

    - name: Copy sec key templates
      ansible.builtin.template:
        src: "SECRET_KEY.j2"
        dest: "{{ awx__17_1_0_config_path }}/SECRET_KEY"
        owner: root #   container runs as root user
        group: root #   container runs as root user
        mode: "0600"

    # Check permissions!
    - name: Copy setting templates
      ansible.builtin.template:
        src: "{{ item.file }}.j2"
        dest: "{{ awx__17_1_0_config_path }}/{{ item.file }}"
        owner: root #   container runs as root user
        group: root #   container runs as root user
        mode: "{{ item.mode }}"
      loop:
        - file: environment.sh
          mode: "0600"
        - file: credentials.py
          mode: "0600"
        - file: nginx.conf
          mode: "0600"
        - file: redis.conf
          mode: "0664"

    - name: Create a network for AWX
      community.docker.docker_network:
        name: "awx"

    - name: Run DB container
      community.docker.docker_container:
        name: "awx_postgres"
        image: "{{ awx__17_1_0_postgres_image }}"
        restart_policy: unless-stopped
        networks:
          - name: "awx"
        env: "{{ awx__17_1_0_default_env | combine(awx__17_1_0_env_postgres) }}"
        volumes:
          - "/etc/passwd:/etc/passwd:ro"
          - "{{ awx__postgres_data_dir }}/:/var/lib/postgresql/data:Z"
        log_driver: "{{ awx__17_1_0_log_driver }}"
        log_options: "{{ awx__17_1_0_log_options }}"

    - name: Run Redis container
      community.docker.docker_container:
        name: "awx_redis"
        image: "{{ awx__17_1_0_redis_image }}"
        restart_policy: unless-stopped
        networks:
          - name: "awx"
        env: "{{ awx__17_1_0_default_env }}"
        command:
          - "/usr/local/etc/redis/redis.conf"
        volumes:
          - "{{ awx__17_1_0_config_path }}/redis.conf:/usr/local/etc/redis/redis.conf:ro"
          - "{{ awx__redis_socket_dir }}:/var/run/redis/:rw"
        log_driver: "{{ awx__17_1_0_log_driver }}"
        log_options: "{{ awx__17_1_0_log_options }}"

    - name: Run Task container
      community.docker.docker_container:
        name: "awx_{{ awx__setting_awx_task_hostname }}"
        image: "{{ awx__17_1_0_awx_image }}"
        restart_policy: unless-stopped
        user: root
        networks:
          - name: "awx"
        env: "{{ awx__17_1_0_default_env | combine(awx__17_1_0_env_task) }}"
        command:
          - "/usr/bin/launch_awx_task.sh"
        volumes:
          - "supervisor-socket:/var/run/supervisor"
          - "rsyslog-socket:/var/run/awx-rsyslog/"
          - "rsyslog-config:/var/lib/awx/rsyslog/"
          - "{{ awx__redis_socket_dir }}:/var/run/redis/:rw"
          - "{{ awx__17_1_0_config_path }}/SECRET_KEY:/etc/tower/SECRET_KEY"
          - "{{ awx__17_1_0_config_path }}/environment.sh:/etc/tower/conf.d/environment.sh"
          - "{{ awx__17_1_0_config_path }}/credentials.py:/etc/tower/conf.d/credentials.py"
          - "{{ awx__project_data_dir +':/var/lib/awx/projects:rw' }}"
          - "{{ custom_venv_dir +':'+ custom_venv_dir +':rw' }}"
          - "{{ custom_python_dir +':'+ custom_python_dir +':ro' }}"
          - "{{ awx__ca_trust_path +':/etc/pki/ca-trust/source/anchors:ro' }}"
        log_driver: "{{ awx__17_1_0_log_driver }}"
        log_options: "{{ awx__17_1_0_log_options }}"

    - name: Run Web container
      community.docker.docker_container:
        name: "awx_{{ awx__setting_awx_web_hostname }}"
        image: "{{ awx__17_1_0_awx_image }}"
        restart_policy: unless-stopped
        user: root
        networks:
          - name: "awx"
        env: "{{ awx__17_1_0_default_env | combine(awx__17_1_0_env_web) }}"
        ports:
          - "{{ awx__port_web_http }}:8052"
          - "{{ awx__port_web_https }}:8052"
        volumes:
          - "supervisor-socket:/var/run/supervisor"
          - "rsyslog-socket:/var/run/awx-rsyslog/"
          - "rsyslog-config:/var/lib/awx/rsyslog/"
          - "{{ awx__redis_socket_dir }}:/var/run/redis/:rw"
          - "{{ awx__17_1_0_config_path }}/SECRET_KEY:/etc/tower/SECRET_KEY"
          - "{{ awx__17_1_0_config_path }}/environment.sh:/etc/tower/conf.d/environment.sh"
          - "{{ awx__17_1_0_config_path }}/credentials.py:/etc/tower/conf.d/credentials.py"
          - "{{ awx__17_1_0_config_path }}/nginx.conf:/etc/nginx/conf.g/default.conf:ro"
          - "{{ awx__project_data_dir +':/var/lib/awx/projects:rw' }}"
          - "{{ custom_venv_dir +':'+ custom_venv_dir +':rw' }}"
          - "{{ custom_python_dir +':'+ custom_python_dir +':ro' }}"
          - "{{ awx__ca_trust_path +':/etc/pki/ca-trust/source/anchors:ro' }}"
        log_driver: "{{ awx__17_1_0_log_driver }}"
        log_options: "{{ awx__17_1_0_log_options }}"
      register: awx_task_container

    - name: Run AWX migrate (can take more than 10 minutes!)
      community.docker.docker_container_exec:
        container: "awx_{{ awx__setting_awx_web_hostname }}"
        command: 'awx-manage migrate --no-input'
      changed_when: false
      when: (awx_task_container is defined and awx_task_container.changed) or awx__force_run_migrate|bool

    - name: Update CA trust in awx_web container
      community.docker.docker_container_exec:
        container: "awx_{{ awx__setting_awx_web_hostname }}"
        command: '/usr/bin/update-ca-trust'
      changed_when: false

    - name: Update CA trust in awx_task container
      community.docker.docker_container_exec:
        container: "awx_{{ awx__setting_awx_web_hostname }}"
        command: '/usr/bin/update-ca-trust'
      changed_when: false
